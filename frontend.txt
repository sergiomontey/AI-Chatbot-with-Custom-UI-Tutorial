# React Chatbot Component (Detailed with Comments)

```tsx
// This line imports the necessary tools from the React library.
// We're bringing in React itself to build our components, and three special "hooks":
// 1. `useState`: This hook helps us manage data that changes over time, like the messages in the chat.
// 2. `useEffect`: This hook lets us perform actions after the component has rendered or when specific data changes, like scrolling to the bottom of the chat.
// 3. `useRef`: This hook gives us a way to "hold on to" a reference to a specific element in our HTML, so we can interact with it directly, like finding the bottom of the chat window.
import React, { useState, useEffect, useRef } from 'react';

// This line imports the stylesheet for our component.
// Why? To give our chat application a visual style, such as colors, fonts, and layout, we need to link our HTML to a CSS file.
import './App.css'; 

// This section defines a "contract" for what a chat message should look like.
// Why? It ensures that every message object we create will have a `text` (a string of characters) and a `sender` (which can only be 'user' or 'bot'). This helps prevent errors and keeps our code organized.
interface Message {
  text: string;
  sender: 'user' | 'bot';
}

// This is the main part of our application, a functional component named `App`.
// All of our chat application's logic and user interface will be contained within this function.
const App: React.FC = () => {
  // `useState` creates a "state variable" for our list of messages.
  // How? `messages` is the current list of messages, and `setMessages` is the function we use to update it.
  // Why? When we use `setMessages`, React knows that it needs to redraw the part of the screen that displays the messages to show the new ones.
  // The initial value is a single message from the bot.
  const [messages, setMessages] = useState<Message[]>([
    { text: "Hello! I am a simple chatbot. How can I help you today?", sender: 'bot' }
  ]);
  
  // This state variable holds the text a user types into the input field.
  const [input, setInput] = useState<string>('');

  // This state variable tracks whether the chatbot is currently generating a response.
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // `useRef` creates a reference to an element in our user interface.
  const chatEndRef = useRef<HTMLDivElement>(null);

  // `useEffect` runs an action when a state variable changes.
  useEffect(() => {
    if (chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // This function is called when the user submits the form.
  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (input.trim() === '' || isLoading) {
      return;
    }

    const userMessage: Message = { text: input, sender: 'user' };
    setMessages(prevMessages => [...prevMessages, userMessage]);
    setInput(''); 
    setIsLoading(true); 

    try {
      const response = await fetch('http://127.0.0.1:5001/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: input }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const botResponse: Message = { text: data.response, sender: 'bot' };
      setMessages(prevMessages => [...prevMessages, botResponse]);

    } catch (error) {
      console.error("Failed to fetch from backend:", error);
      const errorMessage: Message = { text: "Sorry, something went wrong. Please try again later.", sender: 'bot' };
      setMessages(prevMessages => [...prevMessages, errorMessage]);

    } finally {
      setIsLoading(false); 
    }
  };

  return (
    <div className="chatbot-container">
      <header className="chatbot-header">
        <h1>Simple Chatbot</h1>
      </header>

      <div className="message-area">
        {messages.map((msg, index) => (
          <div 
            key={index} 
            className={`message ${msg.sender === 'user' ? 'user-message' : 'bot-message'}`}
          >
            <div className="message-bubble">
              <p>{msg.text}</p>
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="typing-indicator">
            <div className="dot"></div>
            <div className="dot"></div>
            <div className="dot"></div>
          </div>
        )}
        <div ref={chatEndRef}></div>
      </div>

      <form onSubmit={handleSendMessage} className="input-form">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type a message..."
          disabled={isLoading}
          className="input-field"
        />
        <button
          type="submit"
          disabled={isLoading}
          className="send-button"
        >
          {isLoading ? 'Sending...' : 'Send'}
        </button>
      </form>
    </div>
  );
};

export default App;
```
